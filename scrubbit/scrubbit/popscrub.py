import re
import random
import io
from datetime import datetime, timedelta

# Joey, Don't expect all of this code to work - it was a rush job
# written very quickly some years ago and not meant as a 'product' :)
# I did not polish it up for you much... just a little here and there.
# not all this code may work, but overall it does!

# You can generate your own lists of fist/las/middle name combos
# using the composernames.txt generated by rename_it.py - or apply your own
# source of fake names and modify rename_it.py as needed

# Here, we just have a list of random first/last names and middle intials FNAMES, LNAMES, MNAMES
# this is all very crude; there is no mapping of 'real' names to new fake names
# so records can seem very odd considering multiple records that formerly were assicated with
# more than one name now have these 'random' names, but it doesn't matter, this is scrubbed
# and not meant to look truly real

FNAMES = ['HAROLD', 'SALLY', 'CASANDRA', 'GLADYS', 'GERTIE', 'FLORA', 'TOBIE', 'ROSE', 'JOE', 'JAMES', 'WILLIAM', 'WARREN', 'SUSAN', 'CHERISE', 'CHERYL', 'FRED', 'SCOTT', 'DIANE', 'DANA', 'BRIAN', 'KELLY']
LNAMES = ['JOHNSON', 'ANDERSON', 'LINCOLN', 'WASHINGTON', 'JEFFERSON', 'THOMAS', 'KENNEDY', 'ROOSEVELT', 'TAFT', 'HARRISON', 'HARDING', 'SHEPARD', 'TRUMAN', 'FILMORE', 'PIERCE', 'POLK']
MNAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y', 'Z']

class Scrub:
    def __init__(self):
        self.patients = {}
        self.startid = 100001


    def fetch_patient(self, pid):
        # print("ID: {}".format(pid)) # uncomment helper to print list to run console
        patient = self.patients.setdefault(pid, {'name': False, 'patid': False})
        if patient['name'] is False:
            idx = random.randint(0, len(FNAMES)-1)
            fname = FNAMES[idx]
            idx = random.randint(0, len(LNAMES)-1)
            lname = LNAMES[idx]
            idx = random.randint(0, len(MNAMES)-1)
            mname = MNAMES[idx]
            patient['name'] = ("%-23s" % ("{}, {} {}".format(lname, fname, mname)))[0:23]
            patient['patid'] = "PN%08d" % self.startid
            self.startid += 1
        return patient

    def run(self):
        """
        Scrubs without changing dates
        :return: nothing
        """
        RX = r'.{61}\d{2}\/\d{2}\/\d{2} \d{2}\/\d{2}\/\d{2}'
        RX2 = r'SOME PARK HOSPITALS'
        RX3 = r'HOSPITAL \d{2} ( \.{8} )'
        with open('MPP_RECEIPT_ADJ.TXT', 'r') as fupd:
            while True:
                lpos = fupd.tell()
                sline = fupd.readline()
                if not sline: break
                npos = fupd.tell()
                if re.search(RX, sline):
                    pass
                    oldid = sline[18:28].rstrip()
                    pat = self.fetch_patient(oldid)
                    sline = "{}{} {} {}".format(sline[0:18], pat['patid'], pat['name'], sline[53:])
                    print(sline)
                    fupd.seek(lpos)
                    # fupd.write(sline)
                    fupd.seek(npos)

                else:
                    mo = re.search(RX3, sline)
                    if mo:
                        sline = re.sub(RX3, "BRANCH A", sline)
                    mo = re.search(RX2, sline)
                    if mo:
                        fupd.seek(lpos)
                        sline = "{}{}{}".format(sline[0:mo.start()], "ACME PARK HOSPITALS", sline[mo.end():])
                        fupd.seek(npos)

    def runx(self, add_days=900, nrpt="MPP_RECEIPT_ADJ.TXT"):
        """
        Scrubs file adding add_days to the record dates to fudge multiple versions
        :param add_days: number of days to add to individual record (line item) dates
        :param nrpt:
        :return:
        """
        RX = r'.{61}\d{2}\/\d{2}\/\d{2} \d{2}\/\d{2}\/\d{2}'
        RX2 = r'SOME PARK HOSPITALS'
        RX3 = r'HOSPITAL \d{2} \( .{8} \)'
        RX4 = r'\(.{10}\)'
        RXDATE = r'(?P<date>\d{2}\/\d{2}\/\d{2})'

        demo_file = 'rpt_sources/MPP_RECEIPT_ADJ.TXT' #... the 'ARX4T.TXT'

        with open(demo_file, 'r') as fupd:
            """
            read the demo_file - the source file to be scrubbed
            nrpt is where the new (scrubbed) file lines will be stored
            """
            with open(nrpt, 'w') as fout:  #open the output file in write mode
                while True:
                    sline = fupd.readline()

                    if not sline: break
                    nline = io.StringIO(sline)
                    for mo in re.finditer(RXDATE, sline):
                        _x = mo.start('date')
                        ddate = datetime.strptime(mo.group('date'), '%m/%d/%y')
                        nline.seek(_x)
                        nline.write((ddate + timedelta(days=add_days)).strftime('%m/%d/%y'))
                    sline = nline.getvalue()


                    if re.search(RX, sline):
                        oldid = sline[18:28].rstrip()
                        pat = self.fetch_patient(oldid)
                        sline = "{}{} {} {}{}{}".format(sline[0:18], pat['patid'], pat['name'], sline[53:117], "%10.02f" % (random.random() * 1000), sline[126:])
                    else:
                        mo = re.search(RX3, sline)
                        if mo:
                            sline = re.sub(RX4, "( BRANCH A )", sline)
                        mo = re.search(RX2, sline)
                        if mo:
                            sline = "{}{}{}".format(sline[0:mo.start()], "ACME PARK HOSPITALS", sline[mo.end():])
                    sline = re.sub("OLIVE BRANCH", "BRANCH NBR 1", sline)  # 'OLIVE' was in the original report - not in the scrubbed file being used to show how to do this
                    sline = re.sub("OLIVE BR", "BRANCH 1", sline)
                    fout.write(sline)


rpt = Scrub()
for n in range(5):
    # we are generating five versions of this, adding days to each run to change the dates
    # in the record lines to make it seem like there are different versions of the report
    # output goes to the 'output' directory in the pycharm project
    rpt.runx(900 + n, "output/MPP_RECEIPT_ADJ.TXT{}".format(n + 1))
